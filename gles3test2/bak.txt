
#include "esBase.h"
#include "xx_string.h"

#ifndef NDEBUG
void check_gl_error_at(const char* file, int line, const char* func) {
	GLenum err = glGetError();
	if (err != GL_NO_ERROR) {
		printf("OpenGL error: 0x%04x, at %s:%d, %s\n", err, file, line, func);
		abort();
	}
}

#define check_gl_error() check_gl_error_at(__FILE__, __LINE__, __FUNCTION__)
#else
#define check_gl_error() ((void)0)
#endif


// 测试结论：性能 和 传输流量 呈 反比( 但有时候把 float 压缩为 int16 反而会慢，例如 xyz，得测 )，和 显示尺寸 呈 反比
// 显示尺寸无法控制, 传输流量尽量省。mvp 矩阵一旦放入 quad data, 即便不用, 性能也会减半
// 
// 思考某种设计：用法上模拟 cocos 的 Node 树结构，每个 node 结合其 parent 的 位移+缩放+旋转 来算出自己的这几项数据, 逐级计算下去
// 修改 xyzsr 需要 "标脏"，渲染阶段如果发现有变化，且有 children 存在，就需要瀑布更新下去
// 
// 具体到策划案，粒子 或 单Quad 就足够表达 的游戏对象（例如 tiled map 地形，小体积怪，子弹啥的），可以获得巨大利好
// 如果 children 层级较多，则瀑布更新代价很大( 主要消耗的是 cpu )


// 一篇参考文章
// https://blog.csdn.net/weixin_33850918/article/details/112239289
// 每次传递 3x3 matrix 的前 6 个值 + color + textureIndex & Rect
// 传输流量要大一点，计算压力在 cpu. 但是瀑布计算比较简单.

struct QuadData_center_color_scale_rotate_tex {
	float x;
	float y;
	float z;

	uint8_t colorR;
	uint8_t colorG;
	uint8_t colorB;
	uint8_t colorA;

	int16_t scaleX;
	int16_t scaleY;
	int16_t rotate;
	int16_t textureIndex;

	uint16_t textureRectX;
	uint16_t textureRectY;
	uint16_t textureRectWidth;
	uint16_t textureRectHeight;
};

struct QuadData_offset_texcoord {
	float x;
	float y;
};

inline static const QuadData_offset_texcoord offset_and_texcoord[4] = {
{ 0, 0 },
{ 0, 1.f },
{ 1.f, 0 },
{ 1.f, 1.f },
};

struct Game : xx::es::Context<Game> {
	static Game& Instance() { return *(Game*)instance; }

	inline static decltype(auto) vsSrc = R"--(#version 300 es
uniform vec4 u_projection;

in vec2 in_vert;

in vec3 in_center;
in vec4 in_color;
in vec4 in_scale_rotate_i;
in vec4 in_texRect;

out vec3 v_texcoord;
out vec4 v_color;

void main() {
    vec2 offset = vec2(in_vert.x - 0.5f, in_vert.y - 0.5f);
    vec2 texcoord = in_vert;

    vec2 center = in_center.xy;
	float z = in_center.z;
    vec2 scale = in_scale_rotate_i.xy;
    float rotate = in_scale_rotate_i.z;
	float i = in_scale_rotate_i.w;

    float cos_theta = cos(rotate / 3.14159265359);
    float sin_theta = sin(rotate / 3.14159265359);
    vec2 v1 = vec2(offset.x * scale.x, offset.y * scale.y);
    vec2 v2 = vec2(
       dot(v1, vec2(cos_theta, sin_theta)),
       dot(v1, vec2(-sin_theta, cos_theta))
    );
    vec2 v3 = (v2 + center) * u_projection.xy + u_projection.zw;

	v_color = in_color;
	v_texcoord = vec3(in_texRect.x + texcoord.x * in_texRect.z, in_texRect.y + texcoord.y * in_texRect.w, i);
    gl_Position = vec4(v3.x, v3.y, z, 1.0);
}
)--";
	inline static decltype(auto) fsSrc = R"--(#version 300 es
precision mediump float;

uniform sampler2D u_sampler;
in vec3 v_texcoord;
in vec4 v_color;
out vec4 out_color;
void main() {
	out_color = texture(u_sampler, v_texcoord.xy) * v_color;	// todo: v_texcoord.z texture index
}
)--";

	xx::es::Shader vs, fs;
	xx::es::Program ps;
	xx::es::VertexArrays vao;
	xx::es::Buffer vbo1, vbo2;
	xx::es::Texture tex;
	GLuint u_projection{}, u_sampler{}, in_vert{}, in_center{}, in_scale_rotate_i{}, in_color{}, in_texRect{};

	// 个数上限
	GLuint m_max_quad_count = 5000000;

	// logic data. 通过 Init ( 个数 ) 填充
	std::vector<QuadData_center_color_scale_rotate_tex> quads;

	inline int GLInit() {
		glEnable(GL_BLEND);
		glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

		//glViewport(0, 0, width, height);		// todo: call from window resize event
		//glClearColor(0.9f, 0.9f, 0.9f, 0.0f);

		// ps
		vs = LoadVertexShader({ vsSrc }); if (!vs) return __LINE__;
		fs = LoadFragmentShader({ fsSrc }); if (!fs) return __LINE__;
		ps = LinkProgram(vs, fs); if (!ps) return __LINE__;


		// ps args idxs
		u_projection = glGetUniformLocation(ps, "u_projection");
		u_sampler = glGetUniformLocation(ps, "u_sampler");

		in_vert = glGetAttribLocation(ps, "in_vert");
		in_center = glGetAttribLocation(ps, "in_center");
		in_scale_rotate_i = glGetAttribLocation(ps, "in_scale_rotate_i");
		in_color = glGetAttribLocation(ps, "in_color");
		in_texRect = glGetAttribLocation(ps, "in_texRect");

		// tex
		tex = LoadEtc2TextureFile(rootPath / "b.pkm");

		// vao
		glGenVertexArrays(1, &vao.handle);
		glBindVertexArray(vao);
		{
			// vbo instance
			glGenBuffers(1, &vbo1.handle);
			{
				glBindBuffer(GL_ARRAY_BUFFER, vbo1);
				glBufferData(GL_ARRAY_BUFFER, sizeof(QuadData_center_color_scale_rotate_tex) * m_max_quad_count, nullptr, GL_STREAM_DRAW);
			}
			glBindBuffer(GL_ARRAY_BUFFER, 0);

			// vbo shared
			glGenBuffers(1, &vbo2.handle);
			{
				glBindBuffer(GL_ARRAY_BUFFER, vbo2);
				glBufferData(GL_ARRAY_BUFFER, sizeof(offset_and_texcoord), offset_and_texcoord, GL_STATIC_DRAW);
			}
			glBindBuffer(GL_ARRAY_BUFFER, 0);
		}
		glBindVertexArray(0);

		check_gl_error();
		return 0;
	}

	void Update() {
		// todo: change quads logic here
		ShowFpsInTitle();

		glBindBuffer(GL_ARRAY_BUFFER, vbo1);
		{
			auto buf = (QuadData_center_color_scale_rotate_tex*)glMapBufferRange(GL_ARRAY_BUFFER, 0, sizeof(QuadData_center_color_scale_rotate_tex) * quads.size(),
				GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_RANGE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT | GL_MAP_UNSYNCHRONIZED_BIT);
			memcpy(buf, quads.data(), sizeof(QuadData_center_color_scale_rotate_tex) * quads.size());
			glUnmapBuffer(GL_ARRAY_BUFFER);
		}
		glBindBuffer(GL_ARRAY_BUFFER, 0);
		check_gl_error();
	}

	void Draw() {
		glClear(GL_COLOR_BUFFER_BIT);// | GL_DEPTH_BUFFER_BIT);

		glUseProgram(ps);
		glUniform4f(u_projection, 2.0f / width, 2.0f / height, -1.0f, -1.0f);

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, tex);
		glUniform1i(u_sampler, 0);
		check_gl_error();

		glBindVertexArray(vao);

		glBindBuffer(GL_ARRAY_BUFFER, vbo2);
		glVertexAttribPointer(in_vert, 2, GL_FLOAT, GL_FALSE, sizeof(QuadData_offset_texcoord), 0);
		glEnableVertexAttribArray(in_vert);
		check_gl_error();

		glBindBuffer(GL_ARRAY_BUFFER, vbo1);

		glVertexAttribPointer(in_center, 3, GL_FLOAT, GL_FALSE, sizeof(QuadData_center_color_scale_rotate_tex), (GLvoid*)offsetof(QuadData_center_color_scale_rotate_tex, x));
		glVertexAttribDivisor(in_center, 1);
		glEnableVertexAttribArray(in_center);

		glVertexAttribPointer(in_scale_rotate_i, 4, GL_SHORT, GL_FALSE, sizeof(QuadData_center_color_scale_rotate_tex), (GLvoid*)offsetof(QuadData_center_color_scale_rotate_tex, scaleX));
		glVertexAttribDivisor(in_scale_rotate_i, 1);
		glEnableVertexAttribArray(in_scale_rotate_i);

		glVertexAttribPointer(in_color, 4, GL_UNSIGNED_BYTE, GL_TRUE, sizeof(QuadData_center_color_scale_rotate_tex), (GLvoid*)offsetof(QuadData_center_color_scale_rotate_tex, colorR));
		glVertexAttribDivisor(in_color, 1);
		glEnableVertexAttribArray(in_color);

		glVertexAttribPointer(in_texRect, 4, GL_UNSIGNED_SHORT, GL_TRUE, sizeof(QuadData_center_color_scale_rotate_tex), (GLvoid*)offsetof(QuadData_center_color_scale_rotate_tex, textureRectX));
		glVertexAttribDivisor(in_texRect, 1);
		glEnableVertexAttribArray(in_texRect);

		glDrawArraysInstanced(GL_TRIANGLE_STRIP, 0, _countof(offset_and_texcoord), (GLsizei)quads.size());
		check_gl_error();
	}

	void Init(int const& w, int const& h, GLuint const& n, bool vsync) {
		assert(n > 0 && n <= m_max_quad_count);
		this->width = w;
		this->height = h;
		this->vsync = vsync ? 1 : 0;

		auto random_of_range = [](GLfloat min, GLfloat max) {
			return min + (max - min) * (GLfloat(rand()) / RAND_MAX);
		};

		quads.resize(n);
		for (auto& q : quads) {
			q.x = random_of_range(0, w);
			q.y = random_of_range(0, h);
			q.z = 0;
			q.colorR = q.colorG = q.colorB = q.colorA = 0xFFu;
			q.scaleX = 8;//16;// 64;// 128;
			q.scaleY = q.scaleX;
			q.rotate = 0;
			q.textureIndex = 0;
			q.textureRectHeight = 0xFFFFu;
			q.textureRectWidth = 0xFFFFu;
			q.textureRectX = 0;
			q.textureRectY = 0;
		}
	}
};

int main() {
	Game g;
	g.Init(1920, 1080, 4000000, false);
	if (int r = g.Run()) {
		std::cout << "g.Run() r = " << r << ", lastErrorNumber = " << g.lastErrorNumber << ", lastErrorMessage = " << g.lastErrorMessage << std::endl;
	}
}




























//#include "esBase.h"
//#ifdef NDEBUG
//#include <omp.h>
//#endif
//#include <thread>
//#include <xx_ptr.h>
//
//#ifndef NDEBUG
//void check_gl_error_at(const char* file, int line, const char* func) {
//	GLenum err = glGetError();
//	if (err != GL_NO_ERROR) {
//		printf("OpenGL error: 0x%04x, at %s:%d, %s\n", err, file, line, func);
//		abort();
//	}
//}
//
//#define check_gl_error() check_gl_error_at(__FILE__, __LINE__, __FUNCTION__)
//#else
//#define check_gl_error() ((void)0)
//#endif
//
//static_assert(sizeof(GLfloat) == sizeof(float));
//
//// 2d变换矩阵
//using Mat = std::array<float, 3*3>;
//
//// 每个矩形的 实例上下文
//// todo: anchor point support?
//struct QuadInstance {
//	// mvp( 3 * 3 )
//	Mat mat;
//
//	// 坐标
//	float posX;
//	float posY;
//	float posZ;
//	// 贴图数组下标
//	float textureIndex;
//
//	// 图块范围 0 ~ 1 值域
//	float textureRectX;
//	float textureRectY;
//	float textureRectWidth;
//	float textureRectHeight;
//
//	// 混淆色
//	uint8_t colorR;
//	uint8_t colorG;
//	uint8_t colorB;
//	uint8_t colorA;
//	// 缩放
//	float scaleX;
//	float scaleY;
//	// 围绕z轴的旋转角度
//	float angleZ;
//};
//
//// 所有矩形共享的 顶点结构
//struct QuadIndex {
//	float x;
//	float y;
//	float u;
//	float v;
//};
//
//// 6个顶点数据
//inline static const QuadIndex quadIndexs[6] = {
//{ -0.5f, -0.5f, 0.0f, 0.0f },
//{ 0.5f, -0.5f, 1.0f, 0.0f },
//{ 0.5f, 0.5f, 1.0f, 1.0f },
//
//{ 0.5f, 0.5f, 1.0f, 1.0f },
//{ -0.5f, 0.5f, 0.0f, 1.0f },
//{ -0.5f, -0.5f, 0.0f, 0.0f },
//};
//
//// 和上面 quad 结构配合的 shader代码
//inline static decltype(auto) vsSrc = R"--(#version 300 es
//in vec4 in_index;
//
//in mat3 in_mat;
//in vec4 in_posXYZtextureIndex;
//in vec4 in_texRect;
//in vec4 in_colorRGBA;
//in vec3 in_scaleXYangleZ;
//
//out vec3 v_texcoord;
//out vec4 v_color;
//
//void main() {
//    vec2 offset = in_index.xy;
//    vec2 texcoord = in_index.zw;
//
//    vec2 center = in_posXYZtextureIndex.xy;
//	float z = in_posXYZtextureIndex.z;
//	float texidx = in_posXYZtextureIndex.w;
//
//    vec2 scale = in_scaleXYangleZ.xy;
//    float rotate = in_scaleXYangleZ.z;
//
//    float cos_theta = cos(rotate);
//    float sin_theta = sin(rotate);
//
//    vec2 v1 = vec2(offset.x * scale.x, offset.y * scale.y);
//    vec2 v2 = vec2(
//       dot(v1, vec2(cos_theta, sin_theta)),
//       dot(v1, vec2(-sin_theta, cos_theta))
//    );
//    vec3 v3 = in_mat * vec3(v2 + center, 1.0);
//
//	v_texcoord = vec3(in_texRect.x + texcoord.x * in_texRect.z, in_texRect.y + texcoord.y * in_texRect.w, texidx);
//	v_color = in_colorRGBA;
//    gl_Position = vec4(v3.x, v3.y, z, 1.0);
//}
//)--";
//
//// todo: 贴图数组
//inline static decltype(auto) fsSrc = R"--(#version 300 es
//precision mediump float;
//
//uniform sampler2D u_sampler;
//
//in vec3 v_texcoord;
//in vec4 v_color;
//
//out vec4 out_color;
//
//void main() {
//	out_color = texture(u_sampler, v_texcoord.xy) * v_color;
//}
//)--";
//
//namespace GameLogic {
//	struct Scene;
//}
//
//struct Game : xx::es::Context<Game> {
//	static Game& Instance() { return *(Game*)instance; }
//
//	xx::es::Shader vs, fs;
//	xx::es::Program ps;
//	xx::es::VertexArrays vao;
//	xx::es::Buffer vbo1, vbo2;
//	xx::es::Texture tex;
//	GLuint u_sampler{}, in_index{}, in_mat{}, in_posXYZtextureIndex{}, in_texRect{}, in_colorRGBA{}, in_scaleXYangleZ{};
//
//	// 个数上限. Run 前可改
//	GLuint m_max_quad_count = 1000000;
//
//	// projection 矩阵( 在 GLInit 中初始化 )
//	Mat matProj;
//
//	// todo: 贴图下标分配器
//
//	// 逻辑场景
//	xx::Shared<GameLogic::Scene> scene;
//
//	// 初始化
//	void Init(int const& w, int const& h, GLuint const& n, bool vsync);
//
//	// 逻辑更新
//	void Update();
//
//	// GL 初始化
//	int GLInit();
//
//	// GL 绘制
//	void Draw();
//};
//
//
//
//#include <xx_math.h>
//#include <xx_string.h>
//#include <xx_randoms.h>
//
//namespace GameLogic {
//	// 下列代码模拟 一组 圆形对象, 位于 2d 空间，一开始挤在一起，之后物理随机排开, 直到静止。统计一共要花多长时间。
//	// 数据结构方面不做特殊优化，走正常 oo 风格
//	// 要对比的是 用 或 不用 grid 系统的效率
//
//	// 坐标类型限定
//	using XY = xx::XY<int>;
//
//	// 模拟配置. 格子尺寸, grid 列数均为 2^n 方便位运算
//	static const int gridWidth = 128;
//	static const int gridHeight = 64;
//	static const int gridDiameter = 128;
//
//	static const int mapMinX = gridDiameter;							// >=
//	static const int mapMaxX = gridDiameter * (gridWidth - 1) - 1;		// <=
//	static const int mapMinY = gridDiameter;
//	static const int mapMaxY = gridDiameter * (gridHeight - 1) - 1;
//	static const XY mapCenter = { (mapMinX + mapMaxX) / 2, (mapMinY + mapMaxY) / 2 };
//
//	// Foo 的半径 / 直径 / 移动速度( 每帧移动单位距离 ) / 邻居查找个数
//	static const int fooRadius = 50;
//	static const int fooSpeed = 5;
//	static const int fooFindNeighborLimit = 20;	// 9格范围内通常能容纳的个数
//
//	struct Scene;
//	struct Foo {
//		// 当前半径
//		int16_t radius = fooRadius;
//		// 当前速度
//		int16_t speed = fooSpeed;
//		// 所在 grid 下标. 放入 im->grid 后，该值不为 -1
//		int gridIndex = -1;
//		// 当前坐标( Update2 单线程填充, 同时同步 grid )
//		XY xy;
//		// 即将生效的坐标( Update 多线并行填充 )
//		XY xy2;
//
//		// 构造时就放入 grid 系统
//		Foo(Scene* const& scene, XY const& xy);
//
//		// 计算下一步 xy 的动向, 写入 xy2
//		void Update(Scene* const& scene);
//
//		// 令 xy2 生效, 同步 grid
//		void Update2(Scene* const& scene);
//	};
//
//	struct Scene {
//		Scene() = delete;
//		Scene(Scene const&) = delete;
//		Scene& operator=(Scene const&) = delete;
//
//		// 格子系统( int16 则总 item 个数不能超过 64k, int 就敞开用了 )
//		xx::Grid2d<Foo*, int> grid;
//
//		// 对象容器 需要在 格子系统 的下方，确保 先 析构，这样才能正确的从 格子系统 移除
//		std::vector<Foo> objs;
//
//		// 随机数一枚, 用于对象完全重叠的情况下产生一个移动方向
//		xx::Random1 rnd;
//
//		// 每帧统计还有多少个对象正在移动
//		int count = 0;
//
//		Scene(int const& fooCount) {
//			// 初始化 2d 空间索引 容器
//			grid.Init(gridHeight, gridWidth, fooCount);
//
//			// 必须先预留足够多个数, 否则会导致数组变化, 指针失效
//			objs.reserve(fooCount);
//
//			// 直接构造出 n 个 Foo
//			for (int i = 0; i < fooCount; i++) {
//				objs.emplace_back(this, mapCenter);
//			}
//		}
//
//		void Update() {
//			count = 0;
//			auto siz = objs.size();
//			// 这里先简化，没有删除行为。否则就要记录到线程安全队列，事后批量删除
//#ifdef NDEBUG
//#pragma omp parallel for
//#endif
//			for (int i = 0; i < siz; ++i) {
//				objs[i].Update(this);
//			}
//			for (int i = 0; i < siz; ++i) {
//				objs[i].Update2(this);
//			}
//		}
//	};
//
//	inline Foo::Foo(Scene* const& scene, XY const& xy) {
//		this->xy = xy;
//		gridIndex = scene->grid.Add(xy.y / gridDiameter, xy.x / gridDiameter, this);
//	}
//
//	inline void Foo::Update(Scene* const& scene) {
//		// 提取坐标
//		auto xy = this->xy;
//
//		// 判断周围是否有别的 Foo 和自己重叠，取前 n 个，根据对方和自己的角度，结合距离，得到 推力矢量，求和 得到自己的前进方向和速度。
//		// 最关键的是最终移动方向。速度需要限定最大值和最小值。如果算出来矢量为 0，那就随机角度正常速度移动。
//		// 移动后的 xy 如果超出了 地图边缘，就硬调整. 
//
//		// 查找 n 个邻居
//		int limit = fooFindNeighborLimit;
//		int crossNum = 0;
//		XY v;
//		scene->grid.LimitFindNeighbor(limit, gridIndex, [&](auto o) {
//			assert(o != this);
//			// 类型转换下方便使用
//			auto& f = *o;
//			// 如果圆心完全重叠，则不产生推力
//			if (f.xy == this->xy) {
//				++crossNum;
//				return;
//			}
//			// 准备判断是否有重叠. r1* r1 + r2 * r2 > (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y)
//			auto r1 = (int)f.radius;
//			auto r2 = (int)this->radius;
//			auto r12 = r1 * r1 + r2 * r2;
//			auto p1 = f.xy;
//			auto p2 = this->xy;
//			auto p12 = (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);
//			// 有重叠
//			if (r12 > p12) {
//				// 计算 f 到 this 的角度( 对方产生的推力方向 ). 
//				auto a = xx::GetAngle<(gridDiameter * 2 >= 1024)>(p1, p2);
//				// 重叠的越多，推力越大?
//				auto inc = xx::Rotate(XY{ this->speed * r12 / p12, 0 }, a);
//				v += inc;
//				++crossNum;
//			}
//			});
//
//		if (crossNum) {
//			// 如果 v == 0 那就随机角度正常速度移动
//			if (v.IsZero()) {
//				auto a = scene->rnd.Next() % xx::table_num_angles;
//				auto inc = xx::Rotate(XY{ speed, 0 }, a);
//				xy += inc;
//			}
//			// 根据 v 移动
//			else {
//				auto a = xx::GetAngleXY(v.x, v.y);
//				auto inc = xx::Rotate(XY{ speed * std::max(crossNum, 5), 0 }, a);
//				xy += inc;
//			}
//
//			// 边缘限定( 当前逻辑有重叠才移动，故边界检测放在这里 )
//			if (xy.x < mapMinX) xy.x = mapMinX;
//			else if (xy.x > mapMaxX) xy.x = mapMaxX;
//			if (xy.y < mapMinY) xy.y = mapMinY;
//			else if (xy.y > mapMaxY) xy.y = mapMaxY;
//		}
//
//		// 保存 xy ( update2 的时候应用 )
//		xy2 = xy;
//	}
//
//	inline void Foo::Update2(Scene* const& scene) {
//		// 变更检测与同步
//		if (xy2 != xy) {
//			++scene->count;
//			xy = xy2;
//			assert(gridIndex != -1);
//			scene->grid.Update(gridIndex, xy2.y / gridDiameter, xy2.x / gridDiameter);
//		}
//	}
//}
//
//void Game::Init(int const& w, int const& h, GLuint const& n, bool vsync) {
//	this->width = w;
//	this->height = h;
//	this->vsync = vsync ? 1 : 0;
//
//	assert(n > 0 && n <= m_max_quad_count);
//	scene.Emplace(n);
//}
//
//void Game::Update() {
//	//scene->Update();
//}
//
//inline void CreateOrthographicOffCenter(float const& left, float const& right, float const& bottom, float const& top, Mat& dst) {
//	assert(right != left);
//	assert(top != bottom);
//
//	dst.fill(0);
//	dst[0] = 2 / (right - left);
//	dst[4] = 2 / (top - bottom);
//
//	dst[6] = (left + right) / (left - right);
//	dst[7] = (top + bottom) / (bottom - top);
//	dst[8] = 1;
//}
//
//int Game::GLInit() {
//	// fill matrix
//	CreateOrthographicOffCenter(0, (float)width, 0, (float)height, matProj);
//
//	glEnable(GL_BLEND);
//	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
//
//	// todo: call from window resize event
//	//glViewport(0, 0, width, height);
//	//glClearColor(0.9f, 0.9f, 0.9f, 0.0f);
//
//	// ps
//	vs = LoadVertexShader({ vsSrc }); if (!vs) return __LINE__;
//	fs = LoadFragmentShader({ fsSrc }); if (!fs) return __LINE__;
//	ps = LinkProgram(vs, fs); if (!ps) return __LINE__;
//
//	// ps args idxs
//	u_sampler = glGetUniformLocation(ps, "u_sampler");
//	in_index = glGetAttribLocation(ps, "in_index");
//	in_mat = glGetAttribLocation(ps, "in_mat");
//	in_posXYZtextureIndex = glGetAttribLocation(ps, "in_posXYZtextureIndex");
//	in_texRect = glGetAttribLocation(ps, "in_texRect");
//	in_colorRGBA = glGetAttribLocation(ps, "in_colorRGBA");
//	in_scaleXYangleZ = glGetAttribLocation(ps, "in_scaleXYangleZ");
//
//	// tex
//	tex = LoadEtc2TextureFile(rootPath / "b.pkm");
//
//	// vao
//	glGenVertexArrays(1, &vao.handle);
//	glBindVertexArray(vao);
//	{
//		// vbo instance
//		glGenBuffers(1, &vbo1.handle);
//		{
//			glBindBuffer(GL_ARRAY_BUFFER, vbo1);
//			glBufferData(GL_ARRAY_BUFFER, sizeof(QuadInstance) * m_max_quad_count, nullptr, GL_STREAM_DRAW);
//		}
//		glBindBuffer(GL_ARRAY_BUFFER, 0);
//
//		// vbo shared
//		glGenBuffers(1, &vbo2.handle);
//		{
//			glBindBuffer(GL_ARRAY_BUFFER, vbo2);
//			glBufferData(GL_ARRAY_BUFFER, sizeof(quadIndexs), quadIndexs, GL_STATIC_DRAW);
//		}
//		glBindBuffer(GL_ARRAY_BUFFER, 0);
//	}
//	glBindVertexArray(0);
//
//	check_gl_error();
//	return 0;
//}
//
//void Game::Draw() {
//	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
//
//	glUseProgram(ps);
//	//glUniform4f(u_projection, 2.0f / width, 2.0f / height, -1.0f, -1.0f);
//
//	glActiveTexture(GL_TEXTURE0);
//	glBindTexture(GL_TEXTURE_2D, tex);
//	glUniform1i(u_sampler, 0);
//	check_gl_error();
//
//	glBindVertexArray(vao);
//	check_gl_error();
//
//	glBindBuffer(GL_ARRAY_BUFFER, vbo2);
//	glVertexAttribPointer(in_index, 4, GL_FLOAT, GL_FALSE, sizeof(QuadIndex), 0);
//	glEnableVertexAttribArray(in_index);
//	check_gl_error();
//
//	auto numQuads = (GLsizei)scene->objs.size();
//
//	glBindBuffer(GL_ARRAY_BUFFER, vbo1);
//	{
//		auto buf = (QuadInstance*)glMapBufferRange(GL_ARRAY_BUFFER, 0, sizeof(QuadInstance) * numQuads,
//			GL_MAP_WRITE_BIT | GL_MAP_INVALIDATE_RANGE_BIT | GL_MAP_INVALIDATE_BUFFER_BIT | GL_MAP_UNSYNCHRONIZED_BIT);
//		auto foos = scene->objs.data();
//#ifdef NDEBUG
////#pragma omp parallel for
//#endif
//		for (int i = 0; i < numQuads; ++i) {
//			auto& b = buf[i];
//			auto const& f = foos[i];
//
//			b.mat = matProj;
//
//			b.posX = f.xy.x * 0.1225f;
//			b.posY = f.xy.y * 0.1225f;
//			b.posZ = 0;
//			b.textureIndex = 0;	// todo
//
//			b.textureRectX = 0;
//			b.textureRectY = 0;
//			b.textureRectWidth = 1.f;
//			b.textureRectHeight = 1.f;
//
//			b.colorR = 255;
//			b.colorG = 255;
//			b.colorB = 255;
//			b.colorA = 255;
//
//			b.scaleX = (15.f / GameLogic::fooRadius) * f.radius;
//			b.scaleY = b.scaleX;
//			b.angleZ = 0;
//		}
//	}
//	glUnmapBuffer(GL_ARRAY_BUFFER);
//	check_gl_error();
//
//	{
//		glVertexAttribPointer(in_mat + 0, 3, GL_FLOAT, GL_FALSE, sizeof(QuadInstance), (GLvoid*)offsetof(QuadInstance, mat));
//		glVertexAttribPointer(in_mat + 1, 3, GL_FLOAT, GL_FALSE, sizeof(QuadInstance), (GLvoid*)(offsetof(QuadInstance, mat) + sizeof(float) * 3));
//		glVertexAttribPointer(in_mat + 2, 3, GL_FLOAT, GL_FALSE, sizeof(QuadInstance), (GLvoid*)(offsetof(QuadInstance, mat) + sizeof(float) * 6));
//		glVertexAttribDivisor(in_mat + 0, 1);
//		glVertexAttribDivisor(in_mat + 1, 1);
//		glVertexAttribDivisor(in_mat + 2, 1);
//		glEnableVertexAttribArray(in_mat + 0);
//		glEnableVertexAttribArray(in_mat + 1);
//		glEnableVertexAttribArray(in_mat + 2);
//	}
//	check_gl_error();
//
//	glVertexAttribPointer(in_posXYZtextureIndex, 4, GL_FLOAT, GL_FALSE, sizeof(QuadInstance), (GLvoid*)offsetof(QuadInstance, posX));
//	glVertexAttribDivisor(in_posXYZtextureIndex, 1);
//	glEnableVertexAttribArray(in_posXYZtextureIndex);
//	check_gl_error();
//
//	glVertexAttribPointer(in_texRect, 4, GL_FLOAT, GL_FALSE, sizeof(QuadInstance), (GLvoid*)offsetof(QuadInstance, textureRectX));
//	glVertexAttribDivisor(in_texRect, 1);
//	glEnableVertexAttribArray(in_texRect);
//	check_gl_error();
//
//	glVertexAttribPointer(in_colorRGBA, 4, GL_UNSIGNED_BYTE, GL_TRUE, sizeof(QuadInstance), (GLvoid*)offsetof(QuadInstance, colorR));
//	glVertexAttribDivisor(in_colorRGBA, 1);
//	glEnableVertexAttribArray(in_colorRGBA);
//	check_gl_error();
//
//	glVertexAttribPointer(in_scaleXYangleZ, 3, GL_FLOAT, GL_FALSE, sizeof(QuadInstance), (GLvoid*)offsetof(QuadInstance, scaleX));
//	glVertexAttribDivisor(in_scaleXYangleZ, 1);
//	glEnableVertexAttribArray(in_scaleXYangleZ);
//	check_gl_error();
//
//	glDrawArraysInstanced(GL_TRIANGLES, 0, _countof(quadIndexs), numQuads);
//	check_gl_error();
//}
//
//int main() {
//#ifdef NDEBUG
//	// 拿一半的 cpu 跑物理( 对于超线程 cpu 来说这样挺好 )
//	auto numThreads = std::thread::hardware_concurrency();
//	omp_set_num_threads(numThreads / 2);
//	omp_set_dynamic(0);
//#endif
//
//	Game g;
//	g.Init(1920, 1080, 1000000, false);
//	if (int r = g.Run()) {
//		std::cout << "g.Run() r = " << r << ", lastErrorNumber = " << g.lastErrorNumber << ", lastErrorMessage = " << g.lastErrorMessage << std::endl;
//	}
//}

































#include "esBase.h"

struct Node {
	std::vector<xx::Shared<Node>> children;

	std::array<GLfloat, 8> squareVertices = {
		-1.0f, -1.0f,
		1.0f, -1.0f,
		-1.0f,  1.0f,
		1.0f,  1.0f,
	};
	std::array<GLfloat, 8> textureVertices = {
		1.0f, 1.0f,
		1.0f, 0.0f,
		0.0f,  1.0f,
		0.0f,  0.0f,
	};

	xx::es::Buffer sv, tv;
	xx::es::Texture t;

	bool dirty = false;
	float x = 0;
	float y = 0;
	float sx = 1.0f;
	float sy = 1.0f;
	float a = 0;
	xx::es::Color4b color{};

	xx::es::Matrix modelMatrix;

	Node();
	std::function<void()> Update;
	void Draw(xx::es::Matrix const& parentMatrix);
};

struct Game : xx::es::Context<Game> {
	static Game& Instance() { return *(Game*)instance; }

	GLint imat = 0;

	xx::es::Shader vs, fs;
	xx::es::Program ps;

	inline static int iXY = 0;
	inline static int iUV = 0;

	inline static int uMvpMatrix = 0;
	inline static int uColor = 0;
	inline static int uTexture = 0;

	xx::es::Matrix projectionMatrix;

	xx::Shared<Node> n;

	// 使用示例： if (int r = CheckGLError(__LINE__)) return r;

	inline int GLInit() {
		vs = LoadVertexShader({ R"--(
#version 300 es

uniform vec4 uColor;
uniform mat4 uMvpMatrix;

in vec4 iXY;
in vec4 iUV;

out vec4 vColor;
out vec2 vUV;

void main() {
	gl_Position = uMvpMatrix * iXY;
	vColor = uColor;
	vUV = iUV.xy;
}
)--" });
		if (!vs) return __LINE__;

		fs = LoadFragmentShader({ R"--(
#version 300 es
precision mediump float;

uniform sampler2D uTexture;

in vec4 vColor;
in vec2 vUV;

out vec4 oColor;

void main() {
   oColor = vColor * texture2D(uTexture, vUV);
}
)--" });
		if (!fs) return __LINE__;

		ps = LinkProgram(vs, fs);
		if (!ps) return __LINE__;

		iXY = glGetAttribLocation(ps, "iXY");
		iUV = glGetAttribLocation(ps, "iUV");
		uMvpMatrix = glGetUniformLocation(ps, "uMvpMatrix");
		uColor = glGetUniformLocation(ps, "uColor");
		uTexture = glGetUniformLocation(ps, "uTexture");

		glClearColor(1.0f, 1.0f, 1.0f, 0.0f);

		glDisable(GL_BLEND);
		//glDisable(GL_DEPTH_TEST);
		glEnable(GL_VERTEX_PROGRAM_POINT_SIZE);
		if (int r = CheckGLError(__LINE__)) return r;

		// todo: call from window resize event
		glViewport(0, 0, width, height);

		auto aspect = (GLfloat)width / (GLfloat)height;
		esMatrixLoadIdentity(&projectionMatrix);
		esOrtho(&projectionMatrix, -aspect, aspect, 1, -1, -10, 10);



		n.Emplace();
		n->Update = [n = n.pointer, this]{
			n->x = fmodf(elapsedSeconds, 2.f);
			n->y = 0;

			n->a = fmodf(elapsedSeconds * 100, 360.f);

			n->color = { (uint8_t)(int)(elapsedSeconds * 100), 111, 111, 255 };

			n->dirty = true;

			//for (auto& c : n->children) {
			//	c->Update();
			//}
		};
		//for (size_t i = 0; i < 10; i++) {
		//	auto&& n2 = n->children.emplace_back().Emplace();
		//	n2->Update = [i = i, n = n2.pointer, this]{
		//		n->y = 0.1f + (float)i * 0.1f;
		//		n->a = fmodf(elapsedSeconds * 100, 360.f);
		//		n->sz = n->sx = n->sy = 0.1f + fmodf(elapsedSeconds / 10, 0.5f);
		//		n->dirty = true;
		//	};
		//}

		return 0;
	}

	XX_FORCE_INLINE void Update() {
		ShowFpsInTitle();
		n->Update();
	}

	XX_FORCE_INLINE void Draw() {
		glClear(GL_COLOR_BUFFER_BIT);
		n->Draw(projectionMatrix);
		assert(!CheckGLError(__LINE__));
	}
};

inline Node::Node() {
	auto& g = Game::Instance();
	sv = g.LoadVertices(squareVertices.data(), sizeof(squareVertices));
	assert(sv);

	tv = g.LoadVertices(textureVertices.data(), sizeof(textureVertices));
	assert(tv);

	t = g.LoadEtc2TextureFile(g.rootPath / "all.pkm");
	assert(t);
}

// 指令合并思路：如果相同 ps 且 vb ib 一致, 似乎可跳过这部分代码. 
// 如果 ps 不一致 则清0 vb ib. 如果中途会 释放资源，则可能需要每帧清 0
inline GLuint _ps = 0, _sv = 0, _tv = 0, _t = 0;

void Node::Draw(xx::es::Matrix const& parentMatrix) {
	auto& g = Game::Instance();

	if (dirty) {
		dirty = false;
		xx::es::Matrix m;
		esMatrixLoadIdentity(&m);
		if (x != 0.f || y != 0.f) {
			esTranslate(&m, x, y, 0.f);
		}
		if (a != 0.f) {
			esRotate(&m, a, 0.0, 0.0, 1.0);
		}
		if (sx != 1.f || sy != 1.f) {
			esScale(&m, sx, sy, 1.f);
		}
		esMatrixMultiply(&modelMatrix, &m, &parentMatrix);
	}

	if (g.ps != _ps) {
		_ps = g.ps;
		_sv = _tv = 0;
		glUseProgram(g.ps);
	}
	if (_sv != sv) {
		_sv = sv;
		glBindBuffer(GL_ARRAY_BUFFER, sv);											assert(!g.CheckGLError(__LINE__));
		glVertexAttribPointer(g.iXY, 2, GL_FLOAT, GL_FALSE, 8, 0);					assert(!g.CheckGLError(__LINE__));
		glEnableVertexAttribArray(g.iXY);											assert(!g.CheckGLError(__LINE__));
	}

	if (_tv != tv) {
		_tv = tv;
		glBindBuffer(GL_ARRAY_BUFFER, tv);											assert(!g.CheckGLError(__LINE__));
		glVertexAttribPointer(g.iUV, 2, GL_FLOAT, GL_FALSE, 8, 0);					assert(!g.CheckGLError(__LINE__));
		glEnableVertexAttribArray(g.iUV);											assert(!g.CheckGLError(__LINE__));
	}

	if (_t != t) {
		glActiveTexture(GL_TEXTURE0);												assert(!g.CheckGLError(__LINE__));
		glBindTexture(GL_TEXTURE_2D, t);											assert(!g.CheckGLError(__LINE__));
		glUniform1i(g.uTexture, 0);													assert(!g.CheckGLError(__LINE__));
	}

	glUniformMatrix4fv(g.uMvpMatrix, 1, GL_FALSE, (float*)&modelMatrix);			assert(!g.CheckGLError(__LINE__));
	glUniform4f(g.uColor, (float)color.r / 255, (float)color.g / 255, (float)color.b / 255, (float)color.a / 255);	assert(!g.CheckGLError(__LINE__));

	glDrawArrays(GL_TRIANGLE_STRIP, 0, 4);											assert(!g.CheckGLError(__LINE__));

	for (auto& c : children) {
		c->Draw(modelMatrix);
	}
}





int main() {
	Game g;
	g.vsync = 0;
	if (int r = g.Run()) {
		std::cout << "g.Run() r = " << r << ", lastErrorNumber = " << g.lastErrorNumber << ", lastErrorMessage = " << g.lastErrorMessage << std::endl;
	}
}




























/*
		////glDepthMask(true);
		//glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		////glDepthMask(false);

using Matrix = std::array<float, 16>;
inline static const Matrix matrixIdentity = {
		1.0f, 0.0f, 0.0f, 0.0f,
		0.0f, 1.0f, 0.0f, 0.0f,
		0.0f, 0.0f, 1.0f, 0.0f,
		0.0f, 0.0f, 0.0f, 1.0f };
inline static const Matrix matrixZero = {
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0,
		0, 0, 0, 0 };

inline static Matrix Multiply(Matrix const& m1, Matrix const& m2) {
	Matrix r;
	r[0] = m1[0] * m2[0] + m1[4] * m2[1] + m1[8] * m2[2] + m1[12] * m2[3];
	r[1] = m1[1] * m2[0] + m1[5] * m2[1] + m1[9] * m2[2] + m1[13] * m2[3];
	r[2] = m1[2] * m2[0] + m1[6] * m2[1] + m1[10] * m2[2] + m1[14] * m2[3];
	r[3] = m1[3] * m2[0] + m1[7] * m2[1] + m1[11] * m2[2] + m1[15] * m2[3];

	r[4] = m1[0] * m2[4] + m1[4] * m2[5] + m1[8] * m2[6] + m1[12] * m2[7];
	r[5] = m1[1] * m2[4] + m1[5] * m2[5] + m1[9] * m2[6] + m1[13] * m2[7];
	r[6] = m1[2] * m2[4] + m1[6] * m2[5] + m1[10] * m2[6] + m1[14] * m2[7];
	r[7] = m1[3] * m2[4] + m1[7] * m2[5] + m1[11] * m2[6] + m1[15] * m2[7];

	r[8] = m1[0] * m2[8] + m1[4] * m2[9] + m1[8] * m2[10] + m1[12] * m2[11];
	r[9] = m1[1] * m2[8] + m1[5] * m2[9] + m1[9] * m2[10] + m1[13] * m2[11];
	r[10] = m1[2] * m2[8] + m1[6] * m2[9] + m1[10] * m2[10] + m1[14] * m2[11];
	r[11] = m1[3] * m2[8] + m1[7] * m2[9] + m1[11] * m2[10] + m1[15] * m2[11];

	r[12] = m1[0] * m2[12] + m1[4] * m2[13] + m1[8] * m2[14] + m1[12] * m2[15];
	r[13] = m1[1] * m2[12] + m1[5] * m2[13] + m1[9] * m2[14] + m1[13] * m2[15];
	r[14] = m1[2] * m2[12] + m1[6] * m2[13] + m1[10] * m2[14] + m1[14] * m2[15];
	r[15] = m1[3] * m2[12] + m1[7] * m2[13] + m1[11] * m2[14] + m1[15] * m2[15];
	return r;
}

inline Matrix OrthographicOffCenter(float const& left, float const& right, float const& bottom, float const& top, float const& zNearPlane, float const& zFarPlane) {
	assert(right != left);
	assert(top != bottom);
	assert(zFarPlane != zNearPlane);

	Matrix m{};
	m[0] = 2 / (right - left);
	m[5] = 2 / (top - bottom);
	m[10] = 2 / (zNearPlane - zFarPlane);

	m[12] = (left + right) / (left - right);
	m[13] = (top + bottom) / (bottom - top);
	m[14] = (zNearPlane + zFarPlane) / (zNearPlane - zFarPlane);
	m[15] = 1;
	return m;
}

inline Matrix RotationZ(float const& a) {
	auto m = matrixIdentity;

	float c = std::cos(a);
	float s = std::sin(a);

	m[0] = c;
	m[1] = s;
	m[4] = -s;
	m[5] = c;

	return m;
}

inline Matrix Translation(float const& xTranslation, float const& yTranslation, float const& zTranslation) {
	auto m = matrixIdentity;

	m[12] = xTranslation;
	m[13] = yTranslation;
	m[14] = zTranslation;

	return m;
}

inline Matrix Scale(float const& xScale, float const& yScale, float const& zScale) {
	auto m = matrixIdentity;

	m[0] = xScale;
	m[5] = yScale;
	m[10] = zScale;

	return m;
}




		//if (w > h) {
		//	projectionMatrix = OrthographicOffCenter(-w / 2, w / 2, -w / 2, w / 2, 1024, -1024);
		//}
		//else {
		//	projectionMatrix = OrthographicOffCenter(-h / 2, h / 2, -h / 2, h / 2, 1024, -1024);
		//}
		//// todo: 当 window resize 时重新执行这个函数
		//if (width > height) {
		//	glViewport(0, (height - width) / 2, width, width);
		//}
		//else {
		//	glViewport((width - height) / 2, 0, height, height);
		//}


		////if (dirty) {
	//	{
	//		float c = std::cos(a);
	//		float s = std::sin(a);
	//		modelMatrix[0] = c;
	//		modelMatrix[1] = s;
	//		modelMatrix[2] = 0;
	//		modelMatrix[3] = 0;
	//		modelMatrix[4] = -s;
	//		modelMatrix[5] = c;
	//		modelMatrix[6] = 0;
	//		modelMatrix[7] = 0;
	//		modelMatrix[8] = 0;
	//		modelMatrix[9] = 0;
	//		modelMatrix[10] = 1.0f;
	//		modelMatrix[11] = 0;
	//		modelMatrix[12] = 0;
	//		modelMatrix[13] = 0;
	//		modelMatrix[14] = 0;
	//		modelMatrix[15] = 1.0f;
	//	}
	//	if (sx != 1.f) {
	//		modelMatrix[0] *= sx;
	//		modelMatrix[1] *= sx;
	//		modelMatrix[2] *= sx;
	//	}
	//	if (sy != 1.f) {
	//		modelMatrix[4] *= sx;
	//		modelMatrix[5] *= sy;
	//		modelMatrix[6] *= sy;
	//	}
	//	modelMatrix = Multiply(Translation(x, y, 0), modelMatrix);
	////}
*/

































//#include "esBase.h"
//
//struct Vec2f {
//	GLfloat x, y;
//};
//struct Vec3f : Vec2f {
//	GLfloat z;
//};
//struct Color4b {
//	GLubyte r, g, b, a;
//};
//struct XyzColorUv {
//	Vec3f pos;
//	Color4b color;
//	Vec2f uv;
//};
//
//struct Game : xx::es::Context<Game> {
//	static Game& Instance() { return *(Game*)instance; }
//	static const int n = 100000;
//
//	inline static decltype(auto) vsSrc = R"--(
//#version 300 es
//
////uniform mat4 uMatrix;
//
//in vec3 iPos;
//in vec4 iColor;
//in vec2 iUV;
//
//out vec4 vColor;
//out vec2 vUV;
//
//void main() {
//	//gl_Position = uMatrix * vec4(iPos, 1.0f);
//	gl_Position = vec4(iPos, 1.0f);
//	vColor = iColor;
//	vUV = iUV;
//}
//)--";
//	inline static decltype(auto) fsSrc = R"--(
//#version 300 es
//precision mediump float;
//
//uniform sampler2D uTexture;
//
//in vec4 vColor;
//in vec2 vUV;
//
//out vec4 oColor;
//
//void main() {
//   oColor = vColor * texture2D(uTexture, vUV);
//}
//)--";
//
//	xx::es::Shader vs, fs;
//	xx::es::Program ps;
//	GLuint iPos{}, iColor{}, iUV{}, uMatrix{}, uTexture{};
//	xx::es::Buffer vb, ib;
//	std::vector<XyzColorUv> verts;
//	std::vector<GLushort> idxs;
//	xx::es::Texture t;
//
//	inline int GLInit() {
//		vs = LoadVertexShader({ vsSrc });
//		if (!vs) return __LINE__;
//
//		fs = LoadFragmentShader({ fsSrc });
//		if (!fs) return __LINE__;
//
//		ps = LinkProgram(vs, fs);
//		if (!ps) return __LINE__;
//
//		iPos = glGetAttribLocation(ps, "iPos");
//		iColor = glGetAttribLocation(ps, "iColor");
//		iUV = glGetAttribLocation(ps, "iUV");
//		uMatrix = glGetUniformLocation(ps, "uMatrix");
//		uTexture = glGetUniformLocation(ps, "uTexture");
//
//		glClearColor(1.0f, 1.0f, 1.0f, 0.0f);
//
//		// todo: call from window resize event
//		glViewport(0, 0, width, height);
//
//		//vb = LoadVertices(verts.data(), verts.size() * sizeof(XyzColorUv));
//		glGenBuffers(1, &vb.handle);
//		assert(vb);
//		//ib = LoadIndexes(idxs.data(), idxs.size() * sizeof(GLushort));
//		glGenBuffers(1, &ib.handle);
//		assert(ib);
//		{
//			for (size_t i = 0; i < n; i++) {
//				GLushort b = i * 4;
//				idxs.insert(idxs.begin(), { (GLushort)(b + 0), (GLushort)(b + 1), (GLushort)(b + 2), (GLushort)(b + 2), (GLushort)(b + 3), (GLushort)(b + 0) });
//			}
//			glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ib); check_gl_error();
//			glBufferData(GL_ELEMENT_ARRAY_BUFFER, (GLsizei)(idxs.size() * sizeof(GLushort)), idxs.data(), GL_STATIC_DRAW); check_gl_error();
//		}
//
//		t = LoadEtc2TextureFile(rootPath / "b.pkm");
//		assert(t);
//		return 0;
//	}
//
//	XX_FORCE_INLINE void Update() {
//		ShowFpsInTitle();
//
//		if (verts.empty()) {
//			for (size_t i = 0; i < n; i++) {
//				Color4b c{ 255,111,111,255 };
//				{
//					auto&& o = verts.emplace_back();
//					o.pos = { 0,0,0 };
//					o.color = c;
//					o.uv = { 0,0 };
//				}
//				{
//					auto&& o = verts.emplace_back();
//					o.pos = { 1,0,0 };
//					o.color = c;
//					o.uv = { 1,0 };
//				}
//				{
//					auto&& o = verts.emplace_back();
//					o.pos = { 1,1,0 };
//					o.color = c;
//					o.uv = { 1,1 };
//				}
//				{
//					auto&& o = verts.emplace_back();
//					o.pos = { 0,1,0 };
//					o.color = c;
//					o.uv = { 0,1 };
//				}
//			}
//
//			glBindBuffer(GL_ARRAY_BUFFER, vb); check_gl_error();
//			glBufferData(GL_ARRAY_BUFFER, (GLsizei)(verts.size() * sizeof(XyzColorUv)), verts.data(), GL_STATIC_DRAW); check_gl_error();
//		}
//	}
//
//	XX_FORCE_INLINE void Draw() {
//		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
//
//		glUseProgram(ps); check_gl_error();
//		glBindBuffer(GL_ARRAY_BUFFER, vb); check_gl_error();
//		glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ib); check_gl_error();
//
//		glEnableVertexAttribArray(iPos); check_gl_error();
//		glVertexAttribPointer(iPos, 3, GL_FLOAT, GL_FALSE, sizeof(XyzColorUv), (GLvoid*)offsetof(XyzColorUv, pos)); check_gl_error();
//		glEnableVertexAttribArray(iColor); check_gl_error();
//		glVertexAttribPointer(iColor, 4, GL_UNSIGNED_BYTE, GL_TRUE, sizeof(XyzColorUv), (GLvoid*)offsetof(XyzColorUv, color)); check_gl_error();
//		glEnableVertexAttribArray(iUV); check_gl_error();
//		glVertexAttribPointer(iUV, 2, GL_FLOAT, GL_FALSE, sizeof(XyzColorUv), (GLvoid*)offsetof(XyzColorUv, uv)); check_gl_error();
//
//		glActiveTexture(GL_TEXTURE0); check_gl_error();
//		glBindTexture(GL_TEXTURE_2D, t); check_gl_error();
//		glUniform1i(uTexture, 0); check_gl_error();
//
//		glDrawElements(GL_TRIANGLES, (GLsizei)idxs.size(), GL_UNSIGNED_SHORT, 0); check_gl_error();
//	}
//};
//
//
//
//
//int main() {
//	Game g;
//	g.vsync = 0;
//	g.width = 256;
//	g.height = 256;
//	if (int r = g.Run()) {
//		std::cout << "g.Run() r = " << r << ", lastErrorNumber = " << g.lastErrorNumber << ", lastErrorMessage = " << g.lastErrorMessage << std::endl;
//	}
//}
