#pragma once

#include <type_traits>
#include <cstddef>
#include <optional>
#include <vector>
#include <string>
#include <string_view>
#include <variant>
#include <chrono>
#include <unordered_set>
#include <unordered_map>
#include <map>
#include <memory>
#include <functional>
#include <stdexcept>
#include <cstdint>
#include <cstring>
#include <cassert>
#include <ctime>  // std::tm
#include <iomanip>  // std::put_time
#include <array>
#include <sstream>
#include <iostream>
#include <filesystem>
#include <thread>


#ifndef NDEBUG
#define XX_NOINLINE
#define XX_FORCEINLINE
#else
#ifdef _MSC_VER
#define XX_NOINLINE __declspec(noinline)
#define XX_FORCEINLINE __forceinline
#else
#define XX_NOINLINE __attribute__((noinline))
#define XX_FORCEINLINE __attribute__((always_inline))
#endif
#endif
#define XX_INLINE inline


#define XX_STRINGIFY(x)  XX_STRINGIFY_(x)
#define XX_STRINGIFY_(x)  #x


// 注意：如果是 msvc, 需要打开编译参数  /Zc:preprocessor    项目设置 -- preprocessor -- use standard comforming preprocessor -- YES

#define XX_BUGFIX(x) x

#define XX_NARG(...) XX_BUGFIX(XX_NARG_(__VA_ARGS__, XX_RESQN()))
#define XX_NARG_(...) XX_BUGFIX(XX_ARGSN(__VA_ARGS__))
/*
	std::cout << "#define XX_ARGSN(";
	for (size_t i = 0; i < 100; i++) {
		std::cout << "_" << i << ",";
	}
	std::cout << "N,...) N" << std::endl;
	std::cout << "#define XX_RESQN() ";
	for (int i = 100; i > 0; i--) {
		std::cout << i << ",";
	}
	std::cout << "0" << std::endl;
*/
#define XX_ARGSN(_0,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98,_99,N,...) N
#define XX_RESQN() 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 54, 53, 52, 51, 50, 49, 48, 47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0

#define XX_CONCAT(a, b) XX_CONCAT_(a, b)
#define XX_CONCAT_(a, b) a ## b
#define XX_CALL_NARGS(prefix, ...) XX_CONCAT(prefix, XX_BUGFIX(XX_NARG(__VA_ARGS__))) (__VA_ARGS__)

/*
	std::cout << "#define XX_1(b,e,t) b(t)" << std::endl;
	for (size_t i = 2; i < 100; i++)
	{
		std::cout << "#define XX_" << i << "(b,e,t";
		for (size_t j = 1; j < i; j++) {
			std::cout << ",_" << j;
		}
		std::cout << ") \\" << std::endl << "XX_" << (i - 1) << "(b,e,t";
		for (size_t j = 1; j < i - 1; j++) {
			std::cout << ",_" << j;
		}
		std::cout << ") e(t,_" << (i - 1) << ")" << std::endl;
	}
*/
#define XX_1(b,e,t) b(t)
#define XX_2(b,e,t,_1) \
XX_1(b,e,t) e(t,_1)
#define XX_3(b,e,t,_1,_2) \
XX_2(b,e,t,_1) e(t,_2)
#define XX_4(b,e,t,_1,_2,_3) \
XX_3(b,e,t,_1,_2) e(t,_3)
#define XX_5(b,e,t,_1,_2,_3,_4) \
XX_4(b,e,t,_1,_2,_3) e(t,_4)
#define XX_6(b,e,t,_1,_2,_3,_4,_5) \
XX_5(b,e,t,_1,_2,_3,_4) e(t,_5)
#define XX_7(b,e,t,_1,_2,_3,_4,_5,_6) \
XX_6(b,e,t,_1,_2,_3,_4,_5) e(t,_6)
#define XX_8(b,e,t,_1,_2,_3,_4,_5,_6,_7) \
XX_7(b,e,t,_1,_2,_3,_4,_5,_6) e(t,_7)
#define XX_9(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8) \
XX_8(b,e,t,_1,_2,_3,_4,_5,_6,_7) e(t,_8)
#define XX_10(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9) \
XX_9(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8) e(t,_9)
#define XX_11(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) \
XX_10(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9) e(t,_10)
#define XX_12(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) \
XX_11(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10) e(t,_11)
#define XX_13(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) \
XX_12(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11) e(t,_12)
#define XX_14(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) \
XX_13(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12) e(t,_13)
#define XX_15(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14) \
XX_14(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13) e(t,_14)
#define XX_16(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15) \
XX_15(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14) e(t,_15)
#define XX_17(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16) \
XX_16(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15) e(t,_16)
#define XX_18(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17) \
XX_17(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16) e(t,_17)
#define XX_19(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18) \
XX_18(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17) e(t,_18)
#define XX_20(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19) \
XX_19(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18) e(t,_19)
#define XX_21(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20) \
XX_20(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19) e(t,_20)
#define XX_22(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21) \
XX_21(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20) e(t,_21)
#define XX_23(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22) \
XX_22(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21) e(t,_22)
#define XX_24(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23) \
XX_23(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22) e(t,_23)
#define XX_25(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24) \
XX_24(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23) e(t,_24)
#define XX_26(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25) \
XX_25(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24) e(t,_25)
#define XX_27(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26) \
XX_26(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25) e(t,_26)
#define XX_28(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27) \
XX_27(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26) e(t,_27)
#define XX_29(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28) \
XX_28(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27) e(t,_28)
#define XX_30(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29) \
XX_29(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28) e(t,_29)
#define XX_31(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30) \
XX_30(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29) e(t,_30)
#define XX_32(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31) \
XX_31(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30) e(t,_31)
#define XX_33(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32) \
XX_32(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31) e(t,_32)
#define XX_34(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33) \
XX_33(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32) e(t,_33)
#define XX_35(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34) \
XX_34(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33) e(t,_34)
#define XX_36(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35) \
XX_35(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34) e(t,_35)
#define XX_37(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36) \
XX_36(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35) e(t,_36)
#define XX_38(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37) \
XX_37(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36) e(t,_37)
#define XX_39(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38) \
XX_38(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37) e(t,_38)
#define XX_40(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39) \
XX_39(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38) e(t,_39)
#define XX_41(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40) \
XX_40(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39) e(t,_40)
#define XX_42(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41) \
XX_41(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40) e(t,_41)
#define XX_43(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42) \
XX_42(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41) e(t,_42)
#define XX_44(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43) \
XX_43(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42) e(t,_43)
#define XX_45(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44) \
XX_44(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43) e(t,_44)
#define XX_46(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45) \
XX_45(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44) e(t,_45)
#define XX_47(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46) \
XX_46(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45) e(t,_46)
#define XX_48(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47) \
XX_47(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46) e(t,_47)
#define XX_49(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48) \
XX_48(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47) e(t,_48)
#define XX_50(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49) \
XX_49(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48) e(t,_49)
#define XX_51(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50) \
XX_50(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49) e(t,_50)
#define XX_52(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51) \
XX_51(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50) e(t,_51)
#define XX_53(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52) \
XX_52(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51) e(t,_52)
#define XX_54(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53) \
XX_53(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52) e(t,_53)
#define XX_55(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54) \
XX_54(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53) e(t,_54)
#define XX_56(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55) \
XX_55(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54) e(t,_55)
#define XX_57(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56) \
XX_56(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55) e(t,_56)
#define XX_58(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57) \
XX_57(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56) e(t,_57)
#define XX_59(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58) \
XX_58(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57) e(t,_58)
#define XX_60(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59) \
XX_59(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58) e(t,_59)
#define XX_61(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60) \
XX_60(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59) e(t,_60)
#define XX_62(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61) \
XX_61(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60) e(t,_61)
#define XX_63(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62) \
XX_62(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61) e(t,_62)
#define XX_64(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63) \
XX_63(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62) e(t,_63)
#define XX_65(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64) \
XX_64(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63) e(t,_64)
#define XX_66(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65) \
XX_65(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64) e(t,_65)
#define XX_67(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66) \
XX_66(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65) e(t,_66)
#define XX_68(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67) \
XX_67(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66) e(t,_67)
#define XX_69(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68) \
XX_68(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67) e(t,_68)
#define XX_70(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69) \
XX_69(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68) e(t,_69)
#define XX_71(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70) \
XX_70(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69) e(t,_70)
#define XX_72(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71) \
XX_71(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70) e(t,_71)
#define XX_73(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72) \
XX_72(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71) e(t,_72)
#define XX_74(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73) \
XX_73(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72) e(t,_73)
#define XX_75(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74) \
XX_74(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73) e(t,_74)
#define XX_76(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75) \
XX_75(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74) e(t,_75)
#define XX_77(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76) \
XX_76(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75) e(t,_76)
#define XX_78(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77) \
XX_77(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76) e(t,_77)
#define XX_79(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78) \
XX_78(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77) e(t,_78)
#define XX_80(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79) \
XX_79(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78) e(t,_79)
#define XX_81(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80) \
XX_80(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79) e(t,_80)
#define XX_82(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81) \
XX_81(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80) e(t,_81)
#define XX_83(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82) \
XX_82(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81) e(t,_82)
#define XX_84(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83) \
XX_83(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82) e(t,_83)
#define XX_85(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84) \
XX_84(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83) e(t,_84)
#define XX_86(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85) \
XX_85(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84) e(t,_85)
#define XX_87(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86) \
XX_86(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85) e(t,_86)
#define XX_88(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87) \
XX_87(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86) e(t,_87)
#define XX_89(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88) \
XX_88(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87) e(t,_88)
#define XX_90(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89) \
XX_89(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88) e(t,_89)
#define XX_91(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90) \
XX_90(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89) e(t,_90)
#define XX_92(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91) \
XX_91(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90) e(t,_91)
#define XX_93(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92) \
XX_92(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91) e(t,_92)
#define XX_94(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93) \
XX_93(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92) e(t,_93)
#define XX_95(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94) \
XX_94(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93) e(t,_94)
#define XX_96(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95) \
XX_95(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94) e(t,_95)
#define XX_97(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96) \
XX_96(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95) e(t,_96)
#define XX_98(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97) \
XX_97(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96) e(t,_97)
#define XX_99(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97,_98) \
XX_98(b,e,t,_1,_2,_3,_4,_5,_6,_7,_8,_9,_10,_11,_12,_13,_14,_15,_16,_17,_18,_19,_20,_21,_22,_23,_24,_25,_26,_27,_28,_29,_30,_31,_32,_33,_34,_35,_36,_37,_38,_39,_40,_41,_42,_43,_44,_45,_46,_47,_48,_49,_50,_51,_52,_53,_54,_55,_56,_57,_58,_59,_60,_61,_62,_63,_64,_65,_66,_67,_68,_69,_70,_71,_72,_73,_74,_75,_76,_77,_78,_79,_80,_81,_82,_83,_84,_85,_86,_87,_88,_89,_90,_91,_92,_93,_94,_95,_96,_97) e(t,_98)

/*
XX_?? example:
	#define _REG_CLASS(t) Register<t>(XX_STRINGIFY(t))
	#define _REG_FIELDS(t, a) .Field(XX_STRINGIFY(a), &t::a)
	#define REGISTER_CLASS_FIELDS(...) XX_CONCAT(XX_, XX_BUGFIX(XX_NARG(__VA_ARGS__))) (_REG_CLASS, _REG_FIELDS, __VA_ARGS__)
*/

#define XX_HAS_TYPEDEF( TN ) \
template<typename, typename = void> struct HasTypedef_##TN : std::false_type {}; \
template<typename T> struct HasTypedef_##TN<T, std::void_t<typename T::TN>> : std::true_type {}; \
template<typename T> constexpr bool TN = HasTypedef_##TN<T>::value;


namespace xx {
	/************************************************************************************/
	// std::is_pod 的自定义扩展, 用于标识一个类可以在容器中被r memcpy | memmove

	template<typename T, typename ENABLED = void>
	struct IsPod : std::false_type {
	};
	template<typename T>
	struct IsPod<T, std::enable_if_t<std::is_standard_layout_v<T>&& std::is_trivial_v<T>>> : std::true_type {
	};
	template<typename T>
	constexpr bool IsPod_v = IsPod<T>::value;


	/************************************************************************************/
	// 模板类型识别系列


	template<typename T, typename = void>
	struct IsLiteral : std::false_type {
	};
	template<size_t L>
	struct IsLiteral<char[L], void> : std::true_type {
	};
	template<size_t L>
	struct IsLiteral<char const [L], void> : std::true_type {
	};
	template<size_t L>
	struct IsLiteral<char const (&)[L], void> : std::true_type {
	};
	template<typename T>
	constexpr bool IsLiteral_v = IsLiteral<T>::value;


	template<typename T>
	struct IsTimePoint : std::false_type {
	};
	template<typename C, typename D>
	struct IsTimePoint<std::chrono::time_point<C, D>> : std::true_type {
	};
	template<typename C, typename D>
	struct IsTimePoint<std::chrono::time_point<C, D>&> : std::true_type {
	};
	template<typename C, typename D>
	struct IsTimePoint<std::chrono::time_point<C, D>const&> : std::true_type {
	};
	template<typename T>
	constexpr bool IsTimePoint_v = IsTimePoint<T>::value;


	template<typename T>
	struct IsOptional : std::false_type {
	};
	template<typename T>
	struct IsOptional<std::optional<T>> : std::true_type {
	};
	template<typename T>
	struct IsOptional<std::optional<T>&> : std::true_type {
	};
	template<typename T>
	struct IsOptional<std::optional<T> const&> : std::true_type {
	};
	template<typename T>
	constexpr bool IsOptional_v = IsOptional<T>::value;


	template<typename T>
	struct IsVector : std::false_type {
	};
	template<typename T>
	struct IsVector<std::vector<T>> : std::true_type {
	};
	template<typename T>
	struct IsVector<std::vector<T>&> : std::true_type {
	};
	template<typename T>
	struct IsVector<std::vector<T> const&> : std::true_type {
	};
	template<typename T>
	constexpr bool IsVector_v = IsVector<T>::value;


	template<typename>
	struct IsTuple : std::false_type {
	};
	template<typename ...T>
	struct IsTuple<std::tuple<T...>> : std::true_type {
	};
	template<typename ...T>
	struct IsTuple<std::tuple<T...>&> : std::true_type {
	};
	template<typename ...T>
	struct IsTuple<std::tuple<T...> const&> : std::true_type {
	};
	template<typename T>
	constexpr bool IsTuple_v = IsTuple<T>::value;


	template<typename T>
	struct IsShared : std::false_type {
	};
	template<typename T>
	struct IsShared<std::shared_ptr<T>> : std::true_type {
	};
	template<typename T>
	struct IsShared<std::shared_ptr<T>&> : std::true_type {
	};
	template<typename T>
	struct IsShared<std::shared_ptr<T> const&> : std::true_type {
	};
	template<typename T>
	constexpr bool IsShared_v = IsShared<T>::value;


	template<typename T>
	struct IsWeak : std::false_type {
	};
	template<typename T>
	struct IsWeak<std::weak_ptr<T>> : std::true_type {
	};
	template<typename T>
	struct IsWeak<std::weak_ptr<T>&> : std::true_type {
	};
	template<typename T>
	struct IsWeak<std::weak_ptr<T> const&> : std::true_type {
	};
	template<typename T>
	constexpr bool IsWeak_v = IsWeak<T>::value;


	template<typename T>
	struct IsUnique : std::false_type {
	};
	template<typename T>
	struct IsUnique<std::unique_ptr<T>> : std::true_type {
	};
	template<typename T>
	struct IsUnique<std::unique_ptr<T>&> : std::true_type {
	};
	template<typename T>
	struct IsUnique<std::unique_ptr<T> const&> : std::true_type {
	};
	template<typename T>
	constexpr bool IsUnique_v = IsUnique<T>::value;


	template<typename T>
	struct IsUnorderedSet : std::false_type {
	};
	template<typename T>
	struct IsUnorderedSet<std::unordered_set<T>> : std::true_type {
	};
	template<typename T>
	struct IsUnorderedSet<std::unordered_set<T>&> : std::true_type {
	};
	template<typename T>
	struct IsUnorderedSet<std::unordered_set<T> const&> : std::true_type {
	};
	template<typename T>
	constexpr bool IsUnorderedSet_v = IsUnorderedSet<T>::value;


	template<typename T>
	struct IsUnorderedMap : std::false_type {
	};
	template<typename K, typename V>
	struct IsUnorderedMap<std::unordered_map<K, V>> : std::true_type {
		typedef std::pair<K, V> PT;
	};
	template<typename K, typename V>
	struct IsUnorderedMap<std::unordered_map<K, V>&> : std::true_type {
		typedef std::pair<K, V> PT;
	};
	template<typename K, typename V>
	struct IsUnorderedMap<std::unordered_map<K, V> const&> : std::true_type {
		typedef std::pair<K, V> PT;
	};
	template<typename T>
	constexpr bool IsUnorderedMap_v = IsUnorderedMap<T>::value;
	template<typename T>
	using UnorderedMap_Pair_t = typename IsUnorderedMap<T>::PT;


	template<typename T>
	struct IsMap : std::false_type {
	};
	template<typename K, typename V>
	struct IsMap<std::map<K, V>> : std::true_type {
		typedef std::pair<K, V> PT;
	};
	template<typename K, typename V>
	struct IsMap<std::map<K, V>&> : std::true_type {
		typedef std::pair<K, V> PT;
	};
	template<typename K, typename V>
	struct IsMap<std::map<K, V> const&> : std::true_type {
		typedef std::pair<K, V> PT;
	};
	template<typename T>
	constexpr bool IsMap_v = IsMap<T>::value;
	template<typename T>
	using Map_Pair_t = typename IsMap<T>::PT;


	template<typename T>
	struct IsPair : std::false_type {
	};
	template<typename F, typename S>
	struct IsPair<std::pair<F, S>> : std::true_type {
	};
	template<typename F, typename S>
	struct IsPair<std::pair<F, S>&> : std::true_type {
	};
	template<typename F, typename S>
	struct IsPair<std::pair<F, S>const&> : std::true_type {
	};
	template<typename T>
	constexpr bool IsPair_v = IsPair<T>::value;


	template<typename T>
	struct IsArray : std::false_type {
	};
	template<typename T, size_t S>
	struct IsArray<std::array<T, S>> : std::true_type {
	};
	template<typename T, size_t S>
	struct IsArray<std::array<T, S>&> : std::true_type {
	};
	template<typename T, size_t S>
	struct IsArray<std::array<T, S>const&> : std::true_type {
	};
	template<typename T>
	constexpr bool IsArray_v = IsArray<T>::value;


	template<typename, typename = void>
	struct IsContainer : std::false_type {
	};
	template<typename T>
	struct IsContainer<T, std::void_t<decltype(std::declval<T>().data()), decltype(std::declval<T>().size())>>
		: std::true_type {
	};


	/************************************************************************************/
	// IsFunction_v  FunctionType_t 引用类型参数容器类型路由

	template<typename T>
	struct IsFunction : std::false_type {
	};
	template<typename T>
	struct IsFunction<std::function<T>> : std::true_type {
		using FT = T;
	};
	template<typename T>
	struct IsFunction<std::function<T>&> : std::true_type {
		using FT = T;
	};
	template<typename T>
	struct IsFunction<std::function<T> const&> : std::true_type {
		using FT = T;
	};
	template<typename T>
	constexpr bool IsFunction_v = IsFunction<T>::value;
	template<typename T>
	using FunctionType_t = typename IsFunction<T>::FT;


	/************************************************************************************/
	// IsPointerClass_v  是否为指针类 T*, shared_ptr, unique_ptr
	// ToPointer(T?? v) 返回指针版 v

	template<typename, typename = void>
	struct IsPointerClass : std::false_type {
	};

	template<typename T>
	struct IsPointerClass<T, std::enable_if_t<std::is_pointer_v<std::decay_t<T>> || IsShared_v<T> || IsUnique_v<T>>>
		: std::true_type {
	};

	template<typename T>
	constexpr bool IsPointerClass_v = IsPointerClass<T>::value;

	template<typename T, class = void>
	struct ToPointerFuncs;

	template<typename T>
	struct ToPointerFuncs<T, std::enable_if_t<IsPointerClass_v<T>>> {
		static inline auto Convert(T&& v) {
			return &*v;
		}
	};

	template<typename T>
	struct ToPointerFuncs<T, std::enable_if_t<!IsPointerClass_v<T> && !IsWeak_v<T>>> {
		static inline std::remove_reference_t<T>* Convert(T&& v) {
			return &v;
		}
	};

	template<typename T>
	struct ToPointerFuncs<T, std::enable_if_t<IsWeak_v<T>>> {
		static inline auto Convert(T&& v) {
			return v.lock();
		}
	};

	template<typename T>
	auto ToPointer(T&& v) {
		return ToPointerFuncs<T>::Convert(std::forward<T>(v));
	}

	/************************************************************************************/
	// RefC_t 引用类型参数容器类型路由

	template<typename T>
	struct RefWrapper {
		T* p = nullptr;

		RefWrapper() = default;

		RefWrapper(T& v) : p(&v) {}

		inline operator T& () { return *p; }
	};

	template<typename T, class = void>
	struct RefTraits {
		using C = std::decay_t<T>;
	};

	template<typename T>
	struct RefTraits<T, std::enable_if_t<std::is_reference_v<T> && !std::is_const_v<std::remove_reference_t<T>>>> {
		using C = RefWrapper<std::decay_t<T>>;
	};

	template<typename T>
	using RefC_t = typename RefTraits<T>::C;


	/************************************************************************************/
	// FuncR_t   FuncA_t  FuncC_t  lambda / function 类型拆解

	template<typename T, class = void>
	struct FuncTraits;

	template<typename Rtv, typename...Args>
	struct FuncTraits<Rtv(*)(Args ...)> {
		using R = Rtv;
		using A = std::tuple<RefC_t<Args>...>;
		using C = void;
	};

	template<typename Rtv, typename...Args>
	struct FuncTraits<Rtv(Args ...)> {
		using R = Rtv;
		using A = std::tuple<RefC_t<Args>...>;
		using C = void;
	};

	template<typename Rtv, typename CT, typename... Args>
	struct FuncTraits<Rtv(CT::*)(Args ...)> {
		using R = Rtv;
		using A = std::tuple<RefC_t<Args>...>;
		using C = CT;
	};

	template<typename Rtv, typename CT, typename... Args>
	struct FuncTraits<Rtv(CT::*)(Args ...) const> {
		using R = Rtv;
		using A = std::tuple<RefC_t<Args>...>;
		using C = CT;
	};

	template<typename T>
	struct FuncTraits<T, std::void_t<decltype(&T::operator())> >
		: public FuncTraits<decltype(&T::operator())> {
	};

	template<typename T>
	using FuncR_t = typename FuncTraits<T>::R;
	template<typename T>
	using FuncA_t = typename FuncTraits<T>::A;
	template<typename T>
	using FuncC_t = typename FuncTraits<T>::C;


	/************************************************************************************/
	// MemberPointerRtv_t   MemberPointerClass_t  成员变量指针 类型拆解

	template<typename T>
	struct MemberPointerTraits;

	template<typename Rtv, typename CT>
	struct MemberPointerTraits<Rtv(CT::*)> {
		using R = Rtv;
		using C = CT;
	};

	template<typename T>
	using MemberPointerR_t = typename MemberPointerTraits<T>::R;
	template<typename T>
	using MemberPointerC_t = typename MemberPointerTraits<T>::C;


	/************************************************************************************/
	// 容器子类型检测相关

	template<typename T>
	struct ChildType {
		using type = void;
	};
	template<typename T>
	using ChildType_t = typename ChildType<T>::type;


	template<typename T>
	struct ChildType<std::optional<T>> {
		using type = T;
	};
	template<typename T>
	struct ChildType<std::vector<T>> {
		using type = T;
	};

	/************************************************************************************/
	// shared_ptr 系列

	template<typename T, typename ...Args>
	std::shared_ptr<T> Make(Args &&...args) {
		return std::make_shared<T>(std::forward<Args>(args)...);
	}

	template<typename T, typename ...Args>
	std::shared_ptr<T> TryMake(Args &&...args) noexcept {
		try {
			return std::make_shared<T>(std::forward<Args>(args)...);
		}
		catch (...) {
			return std::shared_ptr<T>();
		}
	}

	template<typename T, typename ...Args>
	std::shared_ptr<T>& MakeTo(std::shared_ptr<T>& v, Args &&...args) {
		v = std::make_shared<T>(std::forward<Args>(args)...);
		return v;
	}

	template<typename T, typename ...Args>
	std::shared_ptr<T>& TryMakeTo(std::shared_ptr<T>& v, Args &&...args) noexcept {
		v = TryMake<T>(std::forward<Args>(args)...);
		return v;
	}

	template<typename T, typename U>
	std::shared_ptr<T> As(std::shared_ptr<U> const& v) noexcept {
		return std::dynamic_pointer_cast<T>(v);
	}

	template<typename T, typename U>
	bool Is(std::shared_ptr<U> const& v) noexcept {
		return std::dynamic_pointer_cast<T>(v) != nullptr;
	}

	/************************************************************************************/
	// weak_ptr 系列

	template<typename T, typename U>
	std::weak_ptr<T> AsWeak(std::shared_ptr<U> const& v) noexcept {
		return std::weak_ptr<T>(As<T>(v));
	}

	template<typename T>
	std::weak_ptr<T> ToWeak(std::shared_ptr<T> const& v) noexcept {
		return std::weak_ptr<T>(v);
	}



	/************************************************************************************/
	// unique_ptr 系列

	template<typename T, typename ...Args>
	std::unique_ptr<T> MakeU(Args &&...args) {
		return std::make_unique<T>(std::forward<Args>(args)...);
	}

	template<typename T, typename ...Args>
	std::unique_ptr<T> TryMakeU(Args &&...args) noexcept {
		try {
			return std::make_unique<T>(std::forward<Args>(args)...);
		}
		catch (...) {
			return std::unique_ptr<T>();
		}
	}


	/************************************************************************************/
	// malloc 系列

	template<typename T>
	T* Malloc() {
		return (T*)malloc(sizeof(T));
	}

	template<typename T>
	T*& MallocTo(T*& v) {
		v = (T*)malloc(sizeof(T));
		return v;
	}



	/************************************************************************************/
	// TypeId 映射
	template<typename T>
	struct TypeId {
		static const uint16_t value = 0;
	};

	template<typename T>
	constexpr uint16_t TypeId_v = TypeId<T>::value;

	/*
	// 方便复制

namespace xx {
	template<>
	struct TypeId<XXXXXXXXXXXXXX> {
		static const uint16_t value = XXXXXXXX;
	};
}
*/


	/************************************************************************************/
	// TypeName_v

	namespace Detail {
		template<typename... T>
		constexpr auto NameOf() noexcept {
#if defined(__clang__)
			/* 输出前后缀：
auto xx::Detail::NameOf() [T = <
>]
*/
			return std::string_view{ __PRETTY_FUNCTION__ + 32, sizeof(__PRETTY_FUNCTION__) - 35 };
#elif defined(__GNUC__)
			/* 输出前后缀：
constexpr auto xx::Detail::NameOf() [with T = {
}]
*/
			return std::string_view{ __PRETTY_FUNCTION__ + 47, sizeof(__PRETTY_FUNCTION__) - 50 };
#elif defined(_MSC_VER) && _MSC_VER >= 1920
			/* 输出前后缀：
auto __cdecl xx::Detail::NameOf<
>(void) noexcept
*/
			return std::string_view{ __FUNCSIG__ + 32, sizeof(__FUNCSIG__) - 49 };
#else
			static_assert(false, "unsupported compiler");
#endif
		}
	}
	template<typename... T>
	inline constexpr auto TypeName_v = Detail::NameOf<T...>();

	/************************************************************************************/
	// IsLambda_v

	namespace Detail {
		template<typename T>
		constexpr bool IsLambda() {
			constexpr std::string_view tn = TypeName_v<T>;
#if defined(__clang__)
			// lambda 输出长相: (lambda at /full_path/fileName.ext:line:colum)
			return tn.rfind("(lambda at ", 0) == 0 && *tn.rbegin() == ')' && tn.find(':') > tn.rfind('(');
#elif defined(__GNUC__)
			// lambda 输出长相: ... <lambda( ... )>
			if constexpr (tn.size() < 10 || tn[tn.size() - 1] != '>' || tn[tn.size() - 2] != ')') return false;
			auto at = tn.size() - 3;
			for (std::size_t i = 1; i; --at) {
				i += tn[at = tn.find_last_of("()", at)] == '(' ? -1 : 1;
			}
			return at >= 6 && tn.substr(at - 6, 7) == "<lambda";
#elif defined(_MSC_VER) && _MSC_VER >= 1920 && _MSC_VER < 1930  // vs2019 16.0
			// lambda 输出长相: class ????::<lambda_????>
			return tn.rfind("class ", 0) == 0 && tn.find("::<lambda_", 0) != tn.npos && *tn.rbegin() == '>';
#endif
		}
	}

	template<typename T>
	struct IsLambda : std::integral_constant<bool, Detail::IsLambda<T>()> {
	};

	template<typename T>
	inline constexpr bool IsLambda_v = IsLambda<T>::value;





	/************************************************************************************/
	// Scope Guard( F == lambda )

	template<class F>
	auto MakeScopeGuard(F&& f) noexcept {
		struct ScopeGuard {
			F f;
			bool cancel;

			explicit ScopeGuard(F&& f) noexcept : f(std::move(f)), cancel(false) {}

			~ScopeGuard() noexcept { if (!cancel) { f(); } }

			inline void Cancel() noexcept { cancel = true; }

			inline void operator()(bool cancel = false) {
				f();
				this->cancel = cancel;
			}
		};
		return ScopeGuard(std::forward<F>(f));
	}



	/************************************************************************************/
	// time_point <--> .net DateTime.Now.ToUniversalTime().Ticks converts

	// 经历时间精度: 秒后 7 个 0( 这是 windows 下最高精度. android/ios 会低1个0的精度 )
	typedef std::chrono::duration<long long, std::ratio<1LL, 10000000LL>> duration_10m;

	// 时间点 转 epoch (精度为秒后 7 个 0)
	inline int64_t TimePointToEpoch10m(std::chrono::system_clock::time_point const& val) noexcept {
		return std::chrono::duration_cast<duration_10m>(val.time_since_epoch()).count();
	}
	inline int64_t TimePointToEpoch10m(std::chrono::steady_clock::time_point const& val) noexcept {
		return std::chrono::duration_cast<duration_10m>(val.time_since_epoch()).count();
	}

	//  epoch (精度为秒后 7 个 0) 转 时间点
	inline std::chrono::system_clock::time_point Epoch10mToTimePoint(int64_t const& val) noexcept {
		return std::chrono::system_clock::time_point(std::chrono::duration_cast<std::chrono::system_clock::duration>(duration_10m(val)));
	}


	// 得到当前时间点
	inline std::chrono::system_clock::time_point Now() noexcept {
		return std::chrono::system_clock::now();
	}
	inline std::chrono::system_clock::time_point NowTimePoint() noexcept {
		return std::chrono::system_clock::now();
	}
	inline std::chrono::steady_clock::time_point NowSteadyTimePoint() noexcept {
		return std::chrono::steady_clock::now();
	}

	// 得到当前时间点的 epoch ticks(精度为秒后 7 个 0)
	inline int64_t NowEpoch10m() noexcept {
		return TimePointToEpoch10m(NowTimePoint());
	}

	// 得到当前时间点的 epoch 微妙
	inline int64_t NowEpochMicroseconds() noexcept {
		return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
	}

	// 得到当前时间点的 epoch 毫秒
	inline int64_t NowEpochMilliseconds() noexcept {
		return std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
	}

	// 得到当前时间点的 epoch 秒
	inline double NowEpochSeconds() noexcept {
		return (double)std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count() / 1000000.0;
	}
	// 得到当前时间点的 epoch 秒 更新并返回和 last 的时间差. last 可用 NowEpochSeconds 初始化
	inline double NowEpochSeconds(double& last) noexcept {
		auto now = NowEpochSeconds();
		auto rtv = now - last;
		last = now;
		return rtv;
	}

	// epoch (精度为秒后 7 个 0) 转为 .Net DateTime Utc Ticks
	inline int64_t Epoch10mToUtcDateTimeTicks(int64_t const& val) noexcept {
		return val + 621355968000000000LL;
	}

	// .Net DateTime Utc Ticks 转为 epoch (精度为秒后 7 个 0)
	inline int64_t UtcDateTimeTicksToEpoch10m(int64_t const& val) noexcept {
		return val - 621355968000000000LL;
	}

	// 时间点 转 epoch (精度为秒)
	inline int32_t TimePointToEpoch(std::chrono::system_clock::time_point const& val) noexcept {
		return (int32_t)(val.time_since_epoch().count() / 10000000);
	}

	//  epoch (精度为秒) 转 时间点
	inline std::chrono::system_clock::time_point EpochToTimePoint(int32_t const& val) noexcept {
		return std::chrono::system_clock::time_point(std::chrono::system_clock::time_point::duration((int64_t)val * 10000000));
	}

	// 得到当前时间点的 epoch ticks(精度为秒后 7 个 0)
	inline int64_t NowSteadyEpoch10m() noexcept {
		return TimePointToEpoch10m(NowSteadyTimePoint());
	}

	// 得到当前时间点的 epoch 微妙
	inline int64_t NowSteadyEpochMicroseconds() noexcept {
		return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::steady_clock::now().time_since_epoch()).count();
	}

	// 得到当前时间点的 epoch 毫秒
	inline int64_t NowSteadyEpochMilliseconds() noexcept {
		return std::chrono::duration_cast<std::chrono::milliseconds>(std::chrono::steady_clock::now().time_since_epoch()).count();
	}

	// 得到当前时间点的 epoch 秒
	inline double NowSteadyEpochSeconds() noexcept {
		return (double)std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::steady_clock::now().time_since_epoch()).count() / 1000000.0;
	}
	// 得到当前时间点的 epoch 秒 更新并返回和 last 的时间差. last 可用 NowEpochSeconds 初始化
	inline double NowSteadyEpochSeconds(double& last) noexcept {
		auto now = NowSteadyEpochSeconds();
		auto rtv = now - last;
		last = now;
		return rtv;
	}


	//	// 当前时间转为字符串并填充
	//	inline void NowToString(std::string& s) noexcept {
	//		auto&& t = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());
	//		std::tm tm;
	//#ifdef _WIN32
	//		localtime_s(&tm, &t);
	//#else
	//		localtime_r(&t, &tm);
	//#endif
	//		std::stringstream ss;
	//		ss << std::put_time(&tm, "%Y-%m-%d %X");
	//		s += ss.str();
	//	}
	//
	//	// 当前时间转为字符串并返回
	//	inline std::string NowToString() noexcept {
	//		std::string s;
	//		NowToString(s);
	//		return s;
	//	}





//	/************************************************************************************/
//	// StructMemberCount 统计结构体成员变量个数
//
//	namespace Detail {
//		template<std::size_t N> struct PriorityTag : PriorityTag<N - 1> {};
//		template<> struct PriorityTag<0> {};
//
//		template<class T> struct AnyConverter {
//			template <class U, class = std::enable_if_t<!std::is_same<typename std::decay<T>::type, typename std::decay<U>::type>::value>>
//			constexpr operator U ();
//		};
//		template<class T, std::size_t I> struct AnyConverterTag : AnyConverter<T> {};
//
//		template<class T, class...Args> constexpr auto IsAggregateConstructibleImpl(T&&, Args &&...args) -> decltype(T{ std::forward<Args>(args)... }, std::true_type());
//		template<class T, class Arg> constexpr auto IsAggregateConstructibleImpl(T&&, Arg&& args) -> decltype(T{ std::forward<Arg>(args) }, std::true_type());
//		constexpr auto IsAggregateConstructibleImpl(...)->std::false_type;
//		template<class T, class...Args> struct IsAggregateConstructible : decltype(IsAggregateConstructibleImpl(std::declval<T>(), std::declval<Args>()...)) {};
//
//		template<class T, std::size_t...I> constexpr auto StructMemberCountImpl(std::index_sequence<I...>, PriorityTag<2>) -> std::enable_if_t<IsAggregateConstructible<T, AnyConverterTag<T, I>...>::value, std::size_t> { return sizeof...(I); }
//		constexpr auto StructMemberCountImpl(std::index_sequence<>, PriorityTag<1>) -> std::size_t { return 0; }
//		template<class T, class Seq> constexpr auto StructMemberCountImpl(Seq, PriorityTag<0>) -> std::size_t { return StructMemberCountImpl<T>(std::make_index_sequence<Seq::size() - 1>(), PriorityTag<2>()); };
//		template<class T> constexpr auto StructMemberCountImpl() -> std::size_t { return StructMemberCountImpl<T>(std::make_index_sequence<sizeof(T)>(), PriorityTag<2>()); };
//	}
//
//	template<class T> struct StructMemberCount : std::integral_constant<std::size_t, Detail::StructMemberCountImpl< std::remove_cv_t<std::remove_reference_t<T>> >()> {};
//
//
//	/************************************************************************************/
//	// 利用 structured binding 以及宏展开 实现依次访问 结构体 每个成员
//
//#define ENUM_PARAMS_0(x)
//#define ENUM_PARAMS_1(x) x ## 1
//#define ENUM_PARAMS_2(x) ENUM_PARAMS_1(x), x ## 2
//#define ENUM_PARAMS_3(x) ENUM_PARAMS_2(x), x ## 3
//#define ENUM_PARAMS_4(x) ENUM_PARAMS_3(x), x ## 4
//#define ENUM_PARAMS_5(x) ENUM_PARAMS_4(x), x ## 5
//#define ENUM_PARAMS_6(x) ENUM_PARAMS_5(x), x ## 6
//#define ENUM_PARAMS_7(x) ENUM_PARAMS_6(x), x ## 7
//#define ENUM_PARAMS_8(x) ENUM_PARAMS_7(x), x ## 8
//#define ENUM_PARAMS_9(x) ENUM_PARAMS_8(x), x ## 9
//#define ENUM_PARAMS_10(x) ENUM_PARAMS_9(x), x ## 10
//#define ENUM_PARAMS_11(x) ENUM_PARAMS_10(x), x ## 11
//#define ENUM_PARAMS_12(x) ENUM_PARAMS_11(x), x ## 12
//#define ENUM_PARAMS_13(x) ENUM_PARAMS_12(x), x ## 13
//#define ENUM_PARAMS_14(x) ENUM_PARAMS_13(x), x ## 14
//#define ENUM_PARAMS_15(x) ENUM_PARAMS_14(x), x ## 15
//#define ENUM_PARAMS_16(x) ENUM_PARAMS_15(x), x ## 16
//#define ENUM_PARAMS(x, N) ENUM_PARAMS_##N(x)
//
//#define ENUM_FOR_EACH_0(x)
//#define ENUM_FOR_EACH_1(x) ENUM_FOR_EACH_0(x) x(1)
//#define ENUM_FOR_EACH_2(x) ENUM_FOR_EACH_1(x) x(2)
//#define ENUM_FOR_EACH_3(x) ENUM_FOR_EACH_2(x) x(3)
//#define ENUM_FOR_EACH_4(x) ENUM_FOR_EACH_3(x) x(4)
//#define ENUM_FOR_EACH_5(x) ENUM_FOR_EACH_4(x) x(5)
//#define ENUM_FOR_EACH_6(x) ENUM_FOR_EACH_5(x) x(6)
//#define ENUM_FOR_EACH_7(x) ENUM_FOR_EACH_6(x) x(7)
//#define ENUM_FOR_EACH_8(x) ENUM_FOR_EACH_7(x) x(8)
//#define ENUM_FOR_EACH_9(x) ENUM_FOR_EACH_8(x) x(9)
//#define ENUM_FOR_EACH_10(x) ENUM_FOR_EACH_9(x) x(10)
//#define ENUM_FOR_EACH_11(x) ENUM_FOR_EACH_10(x) x(11)
//#define ENUM_FOR_EACH_12(x) ENUM_FOR_EACH_11(x) x(12)
//#define ENUM_FOR_EACH_13(x) ENUM_FOR_EACH_12(x) x(13)
//#define ENUM_FOR_EACH_14(x) ENUM_FOR_EACH_13(x) x(14)
//#define ENUM_FOR_EACH_15(x) ENUM_FOR_EACH_14(x) x(15)
//#define ENUM_FOR_EACH_16(x) ENUM_FOR_EACH_15(x) x(16)
//#define ENUM_FOR_EACH(x, N) ENUM_FOR_EACH_##N(x)
//
//	namespace Detail {
//#define APPLYER_DEF(N) \
//    template<class T, class ApplyFunc> auto StructApply_impl(T &&in, ApplyFunc &&f, std::integral_constant<std::size_t, N>) { \
//        auto &&[ENUM_PARAMS(x, N)] = std::forward<T>(in); \
//        return f(ENUM_PARAMS(x, N)); \
//    }; \
//
//		ENUM_FOR_EACH(APPLYER_DEF, 16)
//#undef APPLYER_DEF
//
//			template<class T, class ApplyFunc> auto StructApply(T&& in, ApplyFunc&& f) {
//			return StructApply_impl(std::forward<T>(in), std::forward<ApplyFunc>(f), xx::StructMemberCount<T>());
//		};
//	}
//
//	template<class T> auto StructToTuple(T&& in) {
//		return Detail::StructApply(std::forward<T>(in), [](auto const&...args) { return std::make_tuple(args...); });
//	};
//
//	template<class T, class U> void TupleToStruct(T& out, U&& in) {
//		Detail::StructApply(out, [in = std::forward<U>(in)](auto&...args) { return std::tie(args...) = in; });
//	};
//
//	//auto&& t1 = StructToTuple(A{ 1, '2', 3.0 }); // std::tuple<int, char, double> a{1, '2', 3.0}
//	//std::cout << std::get<0>(t1) << std::get<1>(t1) << std::get<2>(t1) << std::endl;
//	//A a2; TupleToStruct(a2, std::make_tuple(4, '5', 6.0)); // a = A{4, '5', 6.0};
//	//std::cout << a2.v1 << a2.v2 << a2.v3 << std::endl;
//
//	template<class T> auto StructToPtrTuple(T&& in) {
//		return Detail::StructApply(std::forward<T>(in), [](auto&&...args) { return std::make_tuple(&args...); });
//	};
//
//
//
//	// for 打印结构体数据
//	struct TupleDumper {
//
//		template<std::size_t I = 0, typename... Tp>
//		static std::enable_if_t<I == sizeof...(Tp) - 1> DumpTuple(std::tuple<Tp...> const& t) {
//			Dump(std::get<I>(t));
//		}
//
//		template<std::size_t I = 0, typename... Tp>
//		static std::enable_if_t < I < sizeof...(Tp) - 1> DumpTuple(std::tuple<Tp...> const& t) {
//			Dump(std::get<I>(t));
//			DumpTuple<I + 1, Tp...>(t);
//		}
//
//		template<typename T>
//		static void Dump(T const* const& v) {
//			if constexpr (xx::IsTuple_v<T>) {
//				DumpTuple(*v);
//			}
//			else if constexpr (std::is_same_v<T, std::string>) {
//				std::cout << *v << " ";
//			}
//			else if constexpr (std::is_class_v<T>) {
//				auto t = xx::StructToPtrTuple(*v);
//				DumpTuple(t);
//			}
//			else {
//				std::cout << *v << " ";
//			}
//		}
//	};
//
//	// 打印结构体数据
//	template<class T>
//	void DumpStruct(T const& in) {
//		TupleDumper::DumpTuple(StructToPtrTuple(in));
//	}
}
